// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: sms_template_type.sql

package db

import (
	"context"
	"database/sql"
	"github.com/yemrealtanay/sms_templates/db/models"
)

const createSmsTemplateType = `-- name: CreateSmsTemplateType :one
INSERT INTO sms_template_types (name,
                           description,
                           key)
VALUES ($1, $2, $3)
RETURNING sms_template_type_id, name, description, key, created_at, updated_at, deleted_at
`

type CreateSmsTemplateTypeParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Key         sql.NullString `json:"key"`
}

func (q *Queries) CreateSmsTemplateType(ctx context.Context, arg CreateSmsTemplateTypeParams) (models.SmsTemplateType, error) {
	row := q.db.QueryRowContext(ctx, createSmsTemplateType, arg.Name, arg.Description, arg.Key)
	var i models.SmsTemplateType
	err := row.Scan(
		&i.SmsTemplateTypeID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteSmsTemplateType = `-- name: DeleteSmsTemplateType :exec
DELETE FROM sms_template_types WHERE sms_template_type_id = $1
`

func (q *Queries) DeleteSmsTemplateType(ctx context.Context, smsTemplateTypeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSmsTemplateType, smsTemplateTypeID)
	return err
}

const updateSmsTemplateType = `-- name: UpdateSmsTemplateType :exec
UPDATE sms_template_types SET name = $1, description = $2, key = $3
WHERE sms_template_type_id = $4
`

type UpdateSmsTemplateTypeParams struct {
	Name              sql.NullString `json:"name"`
	Description       sql.NullString `json:"description"`
	Key               sql.NullString `json:"key"`
	SmsTemplateTypeID int32          `json:"sms_template_type_id"`
}

func (q *Queries) UpdateSmsTemplateType(ctx context.Context, arg UpdateSmsTemplateTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateSmsTemplateType,
		arg.Name,
		arg.Description,
		arg.Key,
		arg.SmsTemplateTypeID,
	)
	return err
}
